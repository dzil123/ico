[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
//render_mode unshaded;
render_mode depth_test_disable;

vec4 FAST_32_hash( vec2 gridcell )
{
//    gridcell is assumed to be an integer coordinate
const vec2 OFFSET = vec2( 26.0, 161.0 );
const float DOMAIN = 71.0;
const float SOMELARGEFLOAT = 951.135664;
vec4 P = vec4( gridcell.xy, gridcell.xy + vec2(1.0) );
P = P - floor(P * ( 1.0 / DOMAIN )) * DOMAIN;    //    truncate the domain
P += OFFSET.xyxy;                                //    offset to interesting part of the noise
P *= P;                                          //    calculate and return the hash
return fract( P.xzxz * P.yyww * vec4( 1.0 / SOMELARGEFLOAT ) );
}

void fragment() {
	vec4 x = (CAMERA_MATRIX * vec4(NORMAL, 0.0));
	vec2 y = vec2(x.x + 3.0*x.z, x.y + 3.0 * x.w);
	ALBEDO = pow(FAST_32_hash(y).xyz, vec3(2.2));
}
"

[resource]
shader = SubResource( 1 )
