[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://assets/octa_tex.tres" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded;

uniform float low_range : hint_range(0.0, 1.0, 0.01) = 0.1;
uniform float high_range : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform vec4 outer_color: hint_color = vec4(vec3(0.4), 1.0);
uniform vec4 inner_color: hint_color = vec4(vec3(0.2), 1.0);
uniform bool toggle_outer = false;
uniform vec3 highlight_tri_pos;
uniform bool enable_highlight_tri_pos = true;
uniform sampler2D tex_colors: hint_black;
uniform sampler2D tex_data: hint_black;
uniform vec2 tex_data_size;
uniform vec2 tex_data_offset;

varying flat vec3 tri_pos;

vec3 pick_tri(vec2 pos) {
	return vec3(
		ceil(1.0 * pos.x - sqrt(3.0) / 3.0 * pos.y),
		floor(sqrt(3.0) * 2.0 / 3.0 * pos.y) + 1.0,
		ceil(-1.0 * pos.x - sqrt(3.0) / 3.0 * pos.y)
	);
}

vec3 tex_color(int i) {
	if (i < 0) {
		return vec3(0.0);
	} else if (i >= 8) {
		return vec3(0.5);
	}
	
	float x = (float(i) * 2.0 + 1.0) / (2.0 * 8.0);
	vec4 col = texture(tex_colors, vec2(x, 0.8));
	
	return col.rgb;
}

vec2 read_data() {
	ivec3 i_tri_pos = ivec3(round(tri_pos));
	bool pointy = i_tri_pos.x + i_tri_pos.y + i_tri_pos.z == 2;
	vec2 raw_pos = tri_pos.xy + tex_data_offset;
	vec2 pos = (raw_pos * 2.0 + 1.0) / (2.0 * tex_data_size); // scaled to 0 - 1
	vec4 col = texture(tex_data, pos);
	return pointy ? col.rg : col.ba;
}

void vertex() {
	mat4 mat = WORLD_MATRIX;
	vec2 world_pos = vec2(mat[3][0], mat[3][2]); // model world position
	tri_pos = pick_tri(world_pos * vec2(1, -1) - 0.25);
//	UV2 = vec2(mat[0][2], 0); // 0 if pointy, 1 if flat
}

void fragment() {
	vec3 bary = COLOR.xyz;  // triangle barycentric coordinates
	
	vec3 k = fwidth(bary) / 2.0; // 2 is optimal because p-k,p+k
	
	vec3 low_split = smoothstep((low_range/3.0)-k, (low_range/3.0)+k, bary);
	float low = low_split.x * low_split.y * low_split.z;

	vec3 high_split = smoothstep((high_range/3.0)-k, (high_range/3.0)+k, bary);
	float high = high_split.x * high_split.y * high_split.z;
	
	float edge = low * (1.0 - high);
	
	if (toggle_outer) {
		edge = 1.0 - edge;
	}
	
	vec3 new_inner_color = inner_color.rgb;
	
	int d = int(read_data().r * 255.0);
	if (d > 0) {
		new_inner_color = tex_color(d - 1);
	}
	
	vec3 color = mix(outer_color.rgb, new_inner_color, edge).rgb;
	
	if (enable_highlight_tri_pos && distance(tri_pos, highlight_tri_pos) < 0.1) {
		color = vec3(1, 0, 0);
	}
	
	ALBEDO = color;
}
"

[resource]
shader = SubResource( 1 )
shader_param/low_range = 0.29
shader_param/high_range = 0.5
shader_param/outer_color = Color( 0.117647, 0.113725, 0.223529, 1 )
shader_param/inner_color = Color( 0.145098, 0.227451, 0.368627, 1 )
shader_param/toggle_outer = false
shader_param/highlight_tri_pos = Vector3( 0, 4, -3 )
shader_param/enable_highlight_tri_pos = false
shader_param/tex_data_size = null
shader_param/tex_data_offset = null
shader_param/tex_colors = ExtResource( 1 )
