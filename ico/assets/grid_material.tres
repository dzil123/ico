[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded;

uniform float percent_visible : hint_range(0.0, 1.0, 0.01) = 0.1;
uniform vec4 outer_color: hint_color = vec4(vec3(0.4), 1.0);
uniform vec4 inner_color: hint_color = vec4(vec3(0.2), 1.0);
uniform bool toggle_outer = false;

void fragment() {
	vec3 bary = COLOR.xyz;  // triangle barycentric coordinates
	
	float p = percent_visible;
	// rescale 0-1 to edge-center - the center coordinate is vec3(1/3)
	p /= 3.0;
	
	vec3 k = fwidth(bary) / 2.0; // 2 is optimal because p-k,p+k
	
	vec3 edge_split = smoothstep(p-k, p+k, bary);
	float edge = edge_split.x * edge_split.y * edge_split.z;
	
	if (toggle_outer) {
		edge = 1.0 - edge;
	}
	
	ALBEDO = mix(outer_color, inner_color, edge).rgb;
}
"

[resource]
shader = SubResource( 1 )
shader_param/percent_visible = 0.15
shader_param/outer_color = Color( 0.51, 0.51, 0.51, 1 )
shader_param/inner_color = Color( 0.239216, 0.239216, 0.239216, 1 )
shader_param/toggle_outer = false
